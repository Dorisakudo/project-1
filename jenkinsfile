pipeline {
    agent { node { label "terraform-node" } } 
    parameters {
        choice(name: 'deploy_choice', choices: ['apply', 'destroy'], description: 'The deployment type')
    }
    environment {
        EMAIL_TO = 'dorisakudo09@gmail.com'
    }
    stages {
        stage('Terraform init') {
            steps {
                echo 'terraform init phase'
                sh 'terraform init -migrate-state'
            }
        }
        stage('Terraform plan') {
            steps {
                echo 'terraform plan phase'
                sh 'terraform plan'
            }
        }
        stage('Manual Approval') {
            input {
                message "Should we proceed?"
                ok "Yes, we should."
                parameters {
                    choice(name: 'Manual_Approval', choices: ['Approve', 'Reject'], description: 'Approve or Reject the deployment')
                }
            }
            steps {
                echo "Deployment ${Manual_Approval}"
            }
        }
        stage('Terraform Deploy') {              
            steps {
                script {
                    if (params.deploy_choice == 'destroy') {
                        echo 'Terraform destroy phase'
                        // Try to destroy and catch errors
                        try {
                            sh 'terraform destroy --auto-approve'
                        } catch (Exception e) {
                            echo 'Terraform destroy failed, proceeding to apply changes to existing infrastructure.'
                            sh 'terraform apply --auto-approve'
                        }
                    } else {
                        echo 'Terraform apply phase'
                        sh 'terraform apply --auto-approve'
                    }
                }
            }
        }
    }
    post {
        failure {
            emailext body: 'Check console output at $BUILD_URL to view the results. \n\n ${CHANGES} \n\n -------------------------------------------------- \n${BUILD_LOG, maxLines=100, escapeHtml=false}', 
                    to: "${EMAIL_TO}", 
                    subject: 'Build failed in Jenkins: $PROJECT_NAME - #$BUILD_NUMBER'
        }
        unstable {
            emailext body: 'Check console output at $BUILD_URL to view the results. \n\n ${CHANGES} \n\n -------------------------------------------------- \n${BUILD_LOG, maxLines=100, escapeHtml=false}', 
                    to: "${EMAIL_TO}", 
                    subject: 'Unstable build in Jenkins: $PROJECT_NAME - #$BUILD_NUMBER'
        }
        changed {
            emailext body: 'Check console output at $BUILD_URL to view the results.', 
                    to: "${EMAIL_TO}", 
                    subject: 'Jenkins build is back to normal: $PROJECT_NAME - #$BUILD_NUMBER'
        }
    }
}
